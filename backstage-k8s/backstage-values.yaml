backstage:
  replicas: 1
  image:
    registry: "" # docker.io
    repository: bittrance/backstage-demo
    tag: 1.0.4
  pdb:
    create: true
  extraVolumes:
    - name: static-entities
      configMap:
        name: static-entities
  extraVolumeMounts:
    - name: static-entities
      mountPath: /static
  appConfig:
    app:
      title: Bittrance Backstage
      baseUrl: https://backstage.localtest.me
    organization:
      name: Bittrance Co
    backend:
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/auth/service-to-service-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: https://backstage.localtest.me
      listen:
        port: 7007
      csp:
        connect-src: ["'self'", 'http:', 'https:']
      cors:
        origin: http://localhost:3000
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
    integrations:
      github:
        - host: github.com
          # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
          # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
          token: ${GITHUB_TOKEN}
    proxy:
      ### Example for how to add a proxy endpoint for the frontend.
      ### A typical reason to do this is to handle HTTPS and CORS for internal services.
      # endpoints:
      #   '/test':
      #     target: 'https://example.com'
      #     changeOrigin: true
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
    auth:
      environment: microsoft
      providers:
        microsoft:
          microsoft:
            tenantId: ${AZURE_TENANT_ID}
            clientId: ${AZURE_CLIENT_ID}
            clientSecret: ${AZURE_CLIENT_SECRET}
            signIn:
              resolvers:
                - resolver: emailMatchingUserEntityProfileEmail
    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options
    catalog:
      readonly: true
      rules:
        - allow: [Component, System, API, Resource, Location]
      locations:
        - type: file
          target: /static/users.yaml
          rules:
            - allow: [Group, User]
    kubernetes:
      frontend:
        podDelete:
          enabled: true
      serviceLocatorMethod:
        type: catalogRelation
      clusterLocatorMethods:
        - type: config
          clusters:
            - url: https://kubernetes.default.svc
              name: local-cluster
              authProvider: serviceAccount
              skipTLSVerify: true # false
              skipMetricsLookup: true
              # serviceAccountToken: ${K8S_MINIKUBE_TOKEN}
              # dashboardUrl: http://127.0.0.1:64713 # url copied from running the command: minikube service kubernetes-dashboard -n kubernetes-dashboard
              # dashboardApp: standard
              # caData: ${K8S_CONFIG_CA_DATA}
    # see https://backstage.io/docs/permissions/getting-started for more on the permission framework
    permission:
      # setting this to `false` will disable permissions
      enabled: true
ingress:
  enabled: true
  host: backstage.localtest.me
  tls:
    enabled: true
    secretName: backstage-certificate
postgresql:
  enabled: true
